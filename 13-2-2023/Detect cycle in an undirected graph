class Solution {
    // Function to detect cycle in an undirected graph.
    class Pair{
        int node;
        int parent;
        Pair(int node, int parent){
            this.node = node;
            this.parent = parent;
        }
    }
    public boolean checkcycle(int source,int V,ArrayList<ArrayList<Integer>> adj,boolean[] visited){
        visited[source]=true;
        Queue<Pair> queue=new LinkedList<>();
        queue.add(new Pair(source,-1));
        while(!queue.isEmpty()){
            Pair pair=queue.poll();
            for(int j:adj.get(pair.node)){
                if(visited[j]==false){
                    visited[j]=true;
                    queue.add(new Pair(j,pair.node));
                }
                else if(pair.parent!=j){
                    return true;
                }
            }
        }
        return false;
    }
    public boolean isCycle(int V, ArrayList<ArrayList<Integer>> adj) {
        // Code here
        boolean visited[]=new boolean[V];
        for(int i=0;i<V;i++){
            if(visited[i]==false){
                if(checkcycle(i,V,adj,visited)){
                    return true;
                }
            }
        }
        return false;
    }
}
