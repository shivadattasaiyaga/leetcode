class Solution
{
    //Function to return a list containing the bottom view of the given tree.
    public ArrayList <Integer> bottomView(Node root)
    {
        // Code here
        class Pair{
            Node node;
            int n;
            Pair(Node node,int n){
               this.node=node;
               this.n=n;
            }
        }
        ArrayList<Integer> list = new ArrayList<>(); 
        if(root == null){
            return list;
        }
        TreeMap <Integer,Integer> map=new TreeMap<>();
        Queue<Pair> queue=new LinkedList<Pair>();
        queue.add(new Pair(root,0));
        while(!queue.isEmpty()){
            Pair p = queue.remove();
            int n = p.n; 
            Node temp = p.node; 
            if((map.get(n) == null)||(map.containsKey(n))){
                map.put(n,temp.data);
            }
            if(temp.left != null){
                queue.add(new Pair(temp.left,n-1)); 
            }
            if(temp.right != null){
                queue.add(new Pair(temp.right,n+1)); 
            }
        }
        for(Map.Entry<Integer,Integer> entry:map.entrySet()){
            list.add(entry.getValue()); 
        }
        return list;
    }
}
